# Vehicle Registration Analytics Dashboard
# Investor-focused dashboard for Indian vehicle registration data

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import io

# Set page configuration
st.set_page_config(
    page_title="Vehicle Registration Analytics",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_data
def load_data():
    """
    Load data from the Excel file, standardize column names, handle errors,
    and reshape it into a long format for the dashboard.
    """
    # Use the correct .xlsx filename
    file_path = 'data/vehicle_registrations_cleaned-1.xlsx'
    try:
        # Use pd.read_excel() to read the Excel file
        # Note: This requires the 'openpyxl' library (`pip install openpyxl`)
        df_wide = pd.read_excel(file_path)
    except FileNotFoundError:
        st.error(f"Error: The data file was not found at '{file_path}'.")
        st.info("Please make sure the Excel file is in the same directory as your Python script.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Error reading the Excel file: {e}")
        return pd.DataFrame()

    # 1. Standardize column names
    df_wide.columns = df_wide.columns.str.lower().str.strip()
    if 'maker' in df_wide.columns:
        df_wide.rename(columns={'maker': 'manufacturer'}, inplace=True)

    # 2. Clean data before processing
    df_wide.dropna(subset=['year'], inplace=True) # Remove rows with no year
    df_wide['year'] = df_wide['year'].astype(int) # Ensure year is an integer

    # 3. Define columns for melting
    id_vars = ['manufacturer', 'vehicle_type', 'year']
    month_cols = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']

    # 4. Check for required columns after cleaning
    required_cols = id_vars + month_cols
    if not all(col in df_wide.columns for col in required_cols):
        st.error("The file is missing required columns even after cleaning.")
        st.info(f"Required: {required_cols}")
        st.warning(f"Found after cleaning: {df_wide.columns.tolist()}")
        return pd.DataFrame()

    # 5. Reshape (melt) the DataFrame from wide to long
    df_long = pd.melt(df_wide,
                      id_vars=id_vars,
                      value_vars=month_cols,
                      var_name='month_name',
                      value_name='registrations')

    # 6. Create a proper 'date' column
    month_map = {
        'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6,
        'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12
    }
    df_long['month_num'] = df_long['month_name'].str.lower().map(month_map)
    df_long['date'] = pd.to_datetime(df_long['year'].astype(str) + '-' + df_long['month_num'].astype(str))
    df_long['date'] = df_long['date'] + pd.offsets.MonthEnd(0)

    # 7. Final cleanup and type casting
    df_long.rename(columns={'vehicle_type': 'vehicle_category'}, inplace=True)
    df_long['manufacturer'] = df_long['manufacturer'].astype(str)
    df_long['month'] = df_long['date'].dt.month
    df_long['quarter'] = 'Q' + df_long['date'].dt.quarter.astype(str)
    df_long['year_quarter'] = df_long['year'].astype(str) + '-' + df_long['quarter']
    df_long['registrations'] = pd.to_numeric(df_long['registrations'], errors='coerce').fillna(0).astype(int)

    # 8. Select final columns
    final_cols = [
        'date', 'year', 'quarter', 'month', 'vehicle_category',
        'manufacturer', 'registrations', 'year_quarter'
    ]
    df_final = df_long[final_cols].copy()

    return df_final


def calculate_growth_metrics(df, groupby_cols, value_col='registrations'):
    """Calculate YoY and QoQ growth metrics."""
    grouped = df.groupby(groupby_cols)[value_col].sum().reset_index()
    
    if 'year' in groupby_cols:
        grouped = grouped.sort_values(by=[col for col in groupby_cols if col != 'year'] + ['year'])
        grouped['yoy_growth'] = grouped.groupby([col for col in groupby_cols if col != 'year'])[value_col].pct_change(periods=1) * 100
    
    if 'year_quarter' in groupby_cols:
        grouped = grouped.sort_values(by=[col for col in groupby_cols if col != 'year_quarter'] + ['year_quarter'])
        grouped['qoq_growth'] = grouped.groupby([col for col in groupby_cols if col != 'year_quarter'])[value_col].pct_change(periods=1) * 100
    
    return grouped

def create_market_share_chart(df, category):
    """Create market share pie chart."""
    market_data = df.groupby('manufacturer')['registrations'].sum().sort_values(ascending=False)
    
    fig = go.Figure(data=[go.Pie(
        labels=market_data.index,
        values=market_data.values,
        hole=0.4,
        textinfo='label+percent',
        textposition='outside'
    )])
    
    fig.update_layout(
        title=f"{category} Market Share",
        template="plotly_white",
        height=400
    )
    
    return fig

def create_growth_heatmap(df):
    """Create growth rate heatmap."""
    pivot_data = df.pivot_table(
        index='manufacturer',
        columns='year',
        values='yoy_growth',
        fill_value=0
    )
    
    fig = px.imshow(
        pivot_data,
        color_continuous_scale='RdYlGn',
        title="YoY Growth Rate by Manufacturer (%)",
        labels=dict(x="Year", y="Manufacturer", color="Growth %")
    )
    
    fig.update_layout(height=400)
    return fig

def main():
    st.title("üöó Vehicle Registration Analytics Dashboard")
    st.markdown("*Investor-focused insights into Indian vehicle registration trends*")
    
    current_year = datetime.now().year
    if current_year == 2025:
        st.info("üìà **2025 Market Outlook**: EV adoption accelerating with significant growth expected across categories. Policy support and infrastructure development driving momentum.")
    
    with st.spinner("Loading and Processing Data..."):
        df = load_data()
    
    if df.empty:
        st.stop()

    # Sidebar filters
    st.sidebar.header("üìä Filters")
    
    min_date = df['date'].min().date()
    max_date = df['date'].max().date()
    
    date_range = st.sidebar.date_input(
        "Select Date Range",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )
    
    if len(date_range) == 2:
        start_date, end_date = date_range
        df_filtered = df[(df['date'] >= pd.to_datetime(start_date)) & (df['date'] <= pd.to_datetime(end_date))]
    else:
        df_filtered = df
    
    selected_categories = st.sidebar.multiselect(
        "Vehicle Categories",
        options=sorted(df['vehicle_category'].unique()),
        default=sorted(df['vehicle_category'].unique())
    )
    
    df_filtered = df_filtered[df_filtered['vehicle_category'].isin(selected_categories)]
    
    available_manufacturers = sorted(df_filtered['manufacturer'].unique())
    selected_manufacturers = st.sidebar.multiselect(
        "Manufacturers",
        options=available_manufacturers,
        default=available_manufacturers
    )
    
    df_filtered = df_filtered[df_filtered['manufacturer'].isin(selected_manufacturers)]
    
    if df_filtered.empty:
        st.warning("‚ö†Ô∏è No data available for the selected filters. Please adjust your filter criteria.")
        return

    # Key Metrics Row
    st.header("üìà Key Performance Indicators")
    
    col1, col2, col3, col4 = st.columns(4)
    
    total_registrations = int(df_filtered['registrations'].sum())
    
    latest_full_year_data = df_filtered[df_filtered['year'] < max_date.year]
    if not latest_full_year_data.empty:
        latest_full_year = latest_full_year_data['year'].max()
        current_year_data = df_filtered[df_filtered['year'] == latest_full_year]
        prev_year_data = df[df['year'] == latest_full_year - 1]
        
        current_year_total = current_year_data['registrations'].sum()
        prev_year_total = prev_year_data['registrations'].sum()
        
        yoy_growth = ((current_year_total - prev_year_total) / prev_year_total * 100) if prev_year_total > 0 else 0
        yoy_delta_text = f"{yoy_growth:+.1f}% YoY ({latest_full_year} vs {latest_full_year-1})"
    else:
        yoy_delta_text = "N/A"

    with col1:
        st.metric("Total Registrations", f"{total_registrations:,}", yoy_delta_text)
    
    with col2:
        category_totals = df_filtered.groupby('vehicle_category')['registrations'].sum()
        top_category = category_totals.idxmax() if not category_totals.empty else "No Data"
        top_category_value = int(category_totals.max()) if not category_totals.empty else 0
        st.metric("Top Category", top_category, f"{top_category_value:,} units")
    
    with col3:
        manufacturer_totals = df_filtered.groupby('manufacturer')['registrations'].sum()
        top_manufacturer = manufacturer_totals.idxmax() if not manufacturer_totals.empty else "No Data"
        top_manufacturer_value = int(manufacturer_totals.max()) if not manufacturer_totals.empty else 0
        st.metric("Top Manufacturer", top_manufacturer, f"{top_manufacturer_value:,} units")
    
    with col4:
        monthly_totals = df_filtered.groupby(pd.Grouper(key='date', freq='ME'))['registrations'].sum()
        avg_monthly = monthly_totals.mean() if not monthly_totals.empty else 0
        st.metric("Avg Monthly Volume", f"{avg_monthly:,.0f}", "In selected period")
    
    
    tab1, tab2, tab3, tab4 = st.tabs(["üìä Overview", "üìà Growth Analysis", "üè≠ Manufacturer Analysis", "üìã Data Export"])
    
    with tab1:
        st.subheader("Registration Trends by Category")
        for category in selected_categories:
            category_data = df_filtered[df_filtered['vehicle_category'] == category]
            if category_data.empty: continue
            
            monthly_data = category_data.groupby(['date'])['registrations'].sum().reset_index()
            st.markdown(f"**{category} Vehicles**")
            
            t1_col1, t1_col2 = st.columns([2, 1])
            with t1_col1:
                fig = px.line(monthly_data, x='date', y='registrations', title=f"{category} Registration Trends", template="plotly_white")
                fig.update_traces(line=dict(width=3))
                st.plotly_chart(fig, use_container_width=True)
            with t1_col2:
                fig_pie = create_market_share_chart(category_data, category)
                st.plotly_chart(fig_pie, use_container_width=True)
    
    with tab2:
        st.subheader("Growth Rate Analysis")
        yearly_growth = calculate_growth_metrics(df_filtered, ['year', 'vehicle_category'], 'registrations')
        quarterly_growth = calculate_growth_metrics(df_filtered, ['year_quarter', 'vehicle_category'], 'registrations')
        
        t2_col1, t2_col2 = st.columns(2)
        with t2_col1:
            st.markdown("**Year-over-Year Growth**")
            if not yearly_growth.empty:
                fig_yoy = px.bar(yearly_growth, x='year', y='yoy_growth', color='vehicle_category', title="YoY Growth by Category", barmode='group')
                fig_yoy.update_layout(yaxis_title="YoY Growth (%)")
                st.plotly_chart(fig_yoy, use_container_width=True)
        with t2_col2:
            st.markdown("**Quarter-over-Quarter Growth**")
            if not quarterly_growth.empty:
                fig_qoq = px.line(quarterly_growth, x='year_quarter', y='qoq_growth', color='vehicle_category', title="QoQ Growth Trends", markers=True)
                fig_qoq.update_layout(yaxis_title="QoQ Growth (%)", xaxis_tickangle=45)
                st.plotly_chart(fig_qoq, use_container_width=True)
        
        st.markdown("**Manufacturer Growth Heatmap**")
        manufacturer_growth = calculate_growth_metrics(df_filtered, ['year', 'manufacturer'], 'registrations')
        if not manufacturer_growth.empty:
            fig_heatmap = create_growth_heatmap(manufacturer_growth.dropna(subset=['yoy_growth']))
            st.plotly_chart(fig_heatmap, use_container_width=True)
    
    with tab3:
        st.subheader("Manufacturer Performance Analysis")
        t3_col1, t3_col2 = st.columns(2)
        with t3_col1:
            st.markdown("**Top 10 Manufacturers by Volume**")
            top_manufacturers = df_filtered.groupby('manufacturer')['registrations'].sum().sort_values(ascending=False).head(10)
            if not top_manufacturers.empty:
                fig_top = px.bar(x=top_manufacturers.values, y=top_manufacturers.index, orientation='h', title="Registration Volume", template="plotly_white", text_auto=True)
                fig_top.update_layout(yaxis={'categoryorder':'total ascending'})
                st.plotly_chart(fig_top, use_container_width=True)
        with t3_col2:
            st.markdown("**Fastest Growing Manufacturers (Latest Year)**")
            man_growth = calculate_growth_metrics(df_filtered, ['year', 'manufacturer'], 'registrations')
            if not man_growth.empty:
                latest_growth_year = man_growth['year'].max()
                latest_growth = man_growth[man_growth['year'] == latest_growth_year].copy().sort_values('yoy_growth', ascending=False).head(10)
                fig_growth = px.bar(latest_growth, x='yoy_growth', y='manufacturer', orientation='h', title=f"YoY Growth % ({latest_growth_year})", color='yoy_growth', color_continuous_scale='RdYlGn', text_auto='.1f')
                fig_growth.update_layout(yaxis={'categoryorder':'total ascending'}, xaxis_title="YoY Growth (%)")
                st.plotly_chart(fig_growth, use_container_width=True)
        
        st.markdown("**Detailed Manufacturer Metrics**")
        manufacturer_summary = df_filtered.groupby(['manufacturer', 'vehicle_category']).agg(
            Total_Registrations=('registrations', 'sum'),
            Avg_Monthly_Registrations=('registrations', 'mean')
        ).reset_index()
        manufacturer_summary['Total_Registrations'] = manufacturer_summary['Total_Registrations'].astype(int)
        manufacturer_summary['Avg_Monthly_Registrations'] = manufacturer_summary['Avg_Monthly_Registrations'].round(0).astype(int)
        st.dataframe(manufacturer_summary.sort_values('Total_Registrations', ascending=False), use_container_width=True, hide_index=True)

    with tab4:
        st.subheader("Data Export & Documentation")
        t4_col1, t4_col2 = st.columns(2)
        with t4_col1:
            st.markdown("**Export Filtered Data**")
            export_data = df_filtered.copy().sort_values(['date', 'vehicle_category', 'manufacturer'])
            csv_data = export_data.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• Download CSV",
                data=csv_data,
                file_name=f"vehicle_registrations_filtered_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )
            st.info(f"**Dataset Info:**\n- Records: {len(export_data):,}\n- Date Range: {export_data['date'].min().strftime('%Y-%m-%d')} to {export_data['date'].max().strftime('%Y-%m-%d')}\n- Categories: {', '.join(sorted(export_data['vehicle_category'].unique()))}")
        
        with t4_col2:
            st.markdown("**Data Sources & Methodology**")
            st.markdown("""
            **Data Collection:**
            - Source: Cleaned dataset derived from Vahan Dashboard.
            - Frequency: Monthly registration data.
            **Data Transformation:**
            - The original 'wide' data with month-columns was 'melted' into a 'long' format.
            - Column names were standardized (lowercase, renamed).
            - Rows with missing years were removed.
            """)

if __name__ == "__main__":
    main()